{"name":"Bdd4php","tagline":"so simple it's incomplete","body":"# bdd4php\r\n\r\nsimple bdd proof of concept for php\r\n\r\n## Basic Syntax\r\n\r\nLooks like this. Look at sampleSpec.php file included in the project for\r\na more detailed example.\r\n\r\n\tScenario::when(\"name the scenario here\", function($then){\r\n\t\t$then->beforeEach(\"set up the initial conditions\", function($scene){\r\n\t\t\t$scene->foo  = \"bar\"\r\n\t\t})->\r\n\t\tthe(\"first name of first user should be correct\", function($scene){\r\n\t\t\texpect($scene->foo)->toBe(\"bar\");\r\n\t\t})->\r\n\t\tthe(\"first name of first user should be correct\", function($scene){\r\n\t\t\texpect($scene->foo)->toBe(\"bar\");\r\n\t\t})->\r\n\r\n## sampleSpec.php\r\n\r\nWhile sampleSpec.php is not something you will use while developing,\r\nit is a helpful starting guide. \r\n\r\nTo see it at work, after cloning the project.\r\n\r\n\t$ cd bdd4php/\r\n\t$ php sampleSpec.php\r\n\r\nThere are 3 passing tests and 2 failing tests by design\r\n\r\n## Syntax explained\r\n\r\n**Scenario**: The scenario class kicks off a series of tests. All test segments\r\nare preceded by a call to Scenario::when($title, $scenarioFunction)\r\n\r\n\t  Scenario::when(\"name the scenario here\", function($then){\r\n\t    ...\r\n\t\t})\r\n\r\n**beforeEach**: sets up the conditions for the tests that will follow within\r\nthis scenario. Called as a instance method on the scenario instance passed in\r\nthrough the Scenario::when call. beforeEach is run before each call to 'the()'\r\n\r\n\t\t$then->beforeEach(\"set up the initial conditions\", function($scene){\r\n\t\t\t...\r\n\t\t})\r\n\r\n    // or...\r\n\r\n\t\t$then->beforeEach(function($scene){\r\n\t\t\t...\r\n\t\t})\r\n\r\nbeforeEach() can be called a second time, and the function given will be run\r\nafter the previously given beforeEach(). To stop chaining beforeEach() calls,\r\nend the Scenario.\r\n\r\n**afterEach**: functions that run after each the() block. Mirros beforeEach in \r\nevery way. \r\n\r\n    $then->afterEach(\"tear down the initial conditions\", function($scene){\r\n\t\t\t...\r\n\t\t})\r\n\r\n**the**: sets up further conditions for particular tests, and provides context for\r\nthe expect() command. \r\n\r\n\t\tthe(\"first name of first user should be correct\", function($scene){\r\n\t\t\t...\r\n\t\t})->\r\n\r\n**expect**: Expects are called from inside the() blocks, although I suspect that expect()\r\ncan be called from anywhere within the Scenario::when() function, but I have not tried it.\r\n\r\n    expect(\"bar\")->toBe(\"bar\");\r\n    expect(\"bar\")->not()->toBe(\"baz\");\r\n    expect(\"bar\")->toBeTypeOf(\"String\");\r\n    expect(\"bar\")->not()->toBeTypeOf(\"String\");\r\n\r\nOnce the Scenario::when() context comes into play, everything except expect() returns \r\nthe same instance of Scenario that is passed in through when(). This means that the() can\r\nbe called from beforeEach() or another the(), and the same is true for beforeEach().\r\n\r\n## Suggested Project Layout\r\n\r\nAssuming my project looks something like this:\r\n\r\n    myProject/\r\n\t\t  itemSet.php\r\n\t\t\t\r\nAdd a specification directory with a place for mocks, stubs, and fixtures. Then clone bdd4php\r\ninto it so that your project now looks like this:\r\n\r\n    myProject/\r\n     itemSet.php\r\n     spec/\r\n       mocks/\r\n       stubs/\r\n       fixtures/\r\n       bdd4php/\r\n         testSuite/\r\n\t\t\t\t   \r\nThere are other directories under testSuite/, but for the purposes of\r\nusing the project (and not developing it), they can safely be ignored.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}